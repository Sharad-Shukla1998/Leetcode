class Solution {
public:
    
    int ans(int arr[],int n){
        	
	stack<pair<int,int>>s;
	vector<int>v(n,-1);
	s.push({arr[n-1],n-1});
	for(int i=n-2;i>=0;i--){
		if(arr[i]>s.top().first)
		{
			v[i]=s.top().second;
		//	s.push(arr[i]);
		}
		else
		{
			while(!s.empty() && s.top().first>=arr[i])
			s.pop();
			if(s.empty())
			v[i]=(-1);
			else
			v[i]=s.top().second;
		}
		s.push({arr[i],i});
	}
// 	for(auto x:v)
// 	cout<<x<<" ";
	
// 	cout<<endl;
	//part2
	stack<pair<int,int>>s1;
	vector<int>v1(n,-1);
	s1.push({arr[0],0});
	for(int i=1;i<n;i++){
		if(arr[i]>s1.top().first)
		{
			v1[i]=s1.top().second;
		//	s.push(arr[i]);
		}
		else
		{
			while(!s1.empty() && s1.top().first>=arr[i])
			s1.pop();
			if(s1.empty())
			v1[i]=(-1);
			else
			v1[i]=s1.top().second;
		}
		s1.push({arr[i],i});
	}
	// for(auto x:v1)
	// cout<<x<<" ";
	// cout<<endl;
	int sum=0;
	for(int i=0;i<n;i++){
		int r=v[i];
		if(v[i]==-1)
		  r=n;
		 int l=v1[i];
		// cout<<arr[i]*(r-l-1)<<" ";
		 sum=max(sum,arr[i]*(r-l-1));
	}
        return sum;
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
        int m=matrix.size();
        if(!m)
            return 0;
        int n=matrix[0].size();
        if(!n)
            return 0;
        int arr[n];
        for(int i=0;i<n;i++)
            arr[i]=0;
        
        int total=INT_MIN;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++){
                if(matrix[i][j]=='0')
                    arr[j]=0;
                else
                    arr[j]+=matrix[i][j]-'0';
            }
            for(int k=0;k<n;k++)
            cout<<arr[k]<<" ";
            int sum=ans(arr,n);
            total=max(total,sum);
            cout<<endl;
        }
    
    return total;}
};
