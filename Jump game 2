O(n2) DP:
class Solution {
public:
    int jump(vector<int>& nums) {
        int n=nums.size();
        if(n==1 || n==0)
            return 0;
        int dp[n];
        dp[0]=0;
        for(int i=1;i<n;i++)
        {
            dp[i]=INT_MAX;
            for(int j=i-1;j>=0;j--){
                if(j+nums[j]<i)
                    continue;
                else
                    dp[i]=min(dp[i],dp[j]+1);
            }
        }
        return dp[n-1];
        
    }
};








O(N)
class Solution {
public:
    int jump(vector<int>& nums) {
        
        int n = nums.size();
        int max_reach = 0, max_end = 0, ans = 0;
        
        for (int i = 0; i < n-1; i++) {
            max_reach = max(max_reach, i + nums[i]);
            if (max_end == i) {
                ans++;
                max_end = max_reach;
            }
        }
        
        return ans;
    }
};
