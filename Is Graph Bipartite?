//Strictly leetcode solution


lass Solution {
public:
    bool isb(vector<vector<int>>& graph,int start,vector<bool>&vis){
        unordered_set<int>s[2];
        queue<int>q;
        s[0].insert(start);
        q.push(start);
        while(!q.empty()){
            int curr=q.front();
         q.pop();
            vis[curr]=true;
            for(int i=0;i<graph[curr].size();i++)
            {
                int n=graph[curr][i];
                int currset=s[0].count(curr)>0?0:1;
                if(s[0].count(n)==0 && s[1].count(n)==0)
                { s[1-currset].insert(n);
                 q.push(n);}
                else {
                    if(s[currset].count(n)>0)
                        return false;
                }
            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        if(!graph.size())
            return true;
        bool a=true;
        vector<bool> vis(graph.size());
        
            for(int j=0;j<graph.size();j++)
                vis[j]=false;
        
        for(int i=0;i<graph.size();i++)
        {
            if(graph[i].size()>0 && !vis[i])
            {  a=a && isb(graph,i,vis);}
        }
       return a; 
    }
};
