class Solution {
public:
    int ladderLength(string begin, string end, vector<string>& wordList) {
       unordered_set<string>s;
        for(int i=0;i<wordList.size();i++)
            s.insert(wordList[i]);
        queue<string>q;
        if(begin==end)
            return 1;
        if(s.find(end)==s.end() || !begin.length() || !end.length())
            return 0;
      
        q.push(begin);
       
        map<string,int>m;
        m[begin]=1;
        while(!q.empty()){
            string a="";
            string b=q.front();
            s.erase(b);
            q.pop();
            if(b==end)
                return m[b];
            for(int j=0;j<begin.length();j++){
                string str=b.substr(j+1);
                
            for(char i='a';i<='z';i++){
                string z=a+i+str;
              
                if(s.find(z)!=s.end()  )
                { 
                    m[z]=m[b]+1;;
                
                    s.erase(z);
                    q.push(z);
                }
                
            }
                a+=b[j];
            
        }
    }
        return 0;}
};
