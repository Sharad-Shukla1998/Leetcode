class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int m=lists.size();
        if(!m)
            return NULL;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        for(int i=0;i<m;i++){
            if(lists[i]){
            pq.push({lists[i]->val,i});
            lists[i]=lists[i]->next;}
        }
        if(!pq.size())
            return NULL;
        ListNode* head=NULL,*prev=NULL;
        int x=pq.top().first;
        ListNode* dum=new ListNode(x);
        head=dum,prev=dum;
        int y=pq.top().second;
        pq.pop();
        if(lists[y]){
        pq.push({lists[y]->val,y});
            lists[y]=lists[y]->next;}
        while(!pq.empty()){
            int x=pq.top().first;
        ListNode* dum=new ListNode(x);
        int y=pq.top().second;
            pq.pop();
            if(lists[y]){
                pq.push({lists[y]->val,y});
        lists[y]=lists[y]->next;
              }
            prev->next=dum;
            prev=dum;
        }
     
        return head;
        
    }
};
